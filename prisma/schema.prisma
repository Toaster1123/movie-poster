generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    firstName String
    lastName  String
    email     String   @unique
    password  String
    role      UserRole @default(USER)

    purchasedTickets PurchasedTickets[]

    provider   String?
    providerId String?

    verified DateTime?

    verificationCode VerificationCode?

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Movie {
    id Int @id @default(autoincrement())

    name        String
    premierDate String
    description String
    movieLength Int?
    ageRating   Int
    imageUrl    String

    persons   Person[]
    genres    Genre[]
    countries Country[]
    seanses   HallSeanses[]
}

model Person {
    id Int @id @default(autoincrement())

    name       String
    profession ProfessionVariants

    movie Movie[]
}

model Genre {
    id Int @id @default(autoincrement())

    name String

    movie Movie[]
}

model Country {
    id Int @id @default(autoincrement())

    name String

    movie Movie[]
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code     String
    createAt DateTime @default(now())

    @@unique([userId, code])
}

model PurchasedTickets {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    price Int
    hall  Int
    time  String

    user   User @relation(fields: [userId], references: [id])
    userId Int

    orderStatus OrderStatus
    paymentId   String?

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model HallSchema {
    id Int @id @default(autoincrement())

    rows Int
    cols Int

    exceptions HallExceptions[]
    occupied   HallOccupied[]
    seanses    HallSeanses[]
}

model HallExceptions {
    id Int @id @default(autoincrement())

    first_row  Int
    first_cols Int
    last_row   Int
    last_cols  Int

    hallSchema   HallSchema @relation(fields: [hallSchemaId], references: [id])
    hallSchemaId Int
}

model HallOccupied {
    id Int @id @default(autoincrement())

    row   Int
    col   Int
    email String

    hallSchema   HallSchema @relation(fields: [hallSchemaId], references: [id])
    hallSchemaId Int

    createAt DateTime @default(now())
}

model HallSeanses {
    id Int @id @default(autoincrement())

    time  String
    price Int

    hallSchema   HallSchema @relation(fields: [hallSchemaId], references: [id])
    hallSchemaId Int
    movie        Movie      @relation(fields: [movieId], references: [id])
    movieId      Int
}

enum UserRole {
    ADMIN
    USER
}

enum ProfessionVariants {
    director
    actor
}

enum OrderStatus {
    PENDING
    SUCCESED
    CANCELED
}
